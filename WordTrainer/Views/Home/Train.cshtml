@model IEnumerable<WordTrainer.Models.Word>


<div class="container my-5 pt-2">

    <div class="py-2 pb-4">
        <div class="progress" style="height: 20px;">
            <div id="scores" class="progress-bar bg-secondary" role="progressbar"
                 style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>

    <div class="form-group pb-0">
        <div class="row">
            <div class="col-12 text-center ">
                <h3 class="h3  text-secondary" id="word"
                    style="font-size: 20pt; 
                        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif"></h3>
            </div>
        </div>
    </div>
    
    <div class="form-group">
        <input type="text" class="form-control text-center" 
               style="font-size: 20pt; font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif" name="trans" id="trans" />
    </div>

    <div class="form-group text-center">
        <button type="submit" class="btn btn-dark" id="btn">Check</button>
    </div>
</div>

<div id="output">

</div>


    
<script type="module">

    import { Word } from '/script.js';

    var wordBox = document.getElementById("word");
    var transBox = document.getElementById("trans");
    var btn = document.getElementById("btn");
    var scores = document.getElementById("scores");

    // Adds EventListener for 'Enter' key press
    trans.addEventListener("keyup", function (e) {
        if (e.keyCode == 13) {
            btn.click();
            this.value = "";
        }
    });

    // Gets data from local storage and casts them to Word instances
    var temp = JSON.parse(localStorage.getItem("model"));
    var arr = [];

    for (const i of temp) {
        arr.push(Word.parse(i));
    }

    // Words ammount 
    var ammount = arr.length;

    scores.attributes["aria-valuemax"].value = 100;

    // actions
    var counter = 0;
    var points = 0;


    // Loads new word in trainer
    // Crearing form's input 'transBox'
    function load() {
        var question = arr[counter];
        wordBox.innerText = question.text;
        transBox.value = "";
        transBox.focus();
    }
    load();

    // Adds EventListener to 'btn' on 'click'
    btn.addEventListener("click", btnCallback);

    // Main 'btn' function
    function btnCallback(e) {
        // Gets value from 'transBox'
        var trans = transBox.value.toLowerCase().trim();
        // if trans is empty - interrupt event executing
        if (trans === "") {
            e.preventDefault();
        }
        else {
            // If translation is right
            if (arr[counter].translation.toLowerCase().split(",").includes(trans) || arr[counter].translation.toLowerCase().split(",").includes(" " + trans)) {
                
                points += 1;
                var tempScores = points * 100 / ammount;
                 scores.innerText = tempScores.toFixed(1) + '%';
                scores.style.width = tempScores + '%';
                scores.attributes["aria-valuenow"].value = tempScores;

                if (counter < ammount - 1) {
                    counter++;
                    load();
                }
                else {
                    transBox.value = "";
                    transBox.setAttribute('disabled', 'true');
                    wordBox.value = "";
                }
            }
            // If translation is not right
            else {
                // If there is at least one word in the storage then load it into 'wordBox'
                if (counter < ammount - 1) {
                    counter++;
                    load();
                }
                // If there isn't any word in the storage
                else {
                    transBox.value = "";
                    wordBox.value = "";
                }
            }
        }
    }
</script>
