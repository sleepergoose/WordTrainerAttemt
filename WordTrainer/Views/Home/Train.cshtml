@model IEnumerable<WordTrainer.Models.Word>


<div class="container top-15">

    <div class="py-2 pb-4">
        <div class="progress" style="height: 20px;">
            <div id="scores" class="progress-bar bg-info" role="progressbar"
                 style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>

    <div class="form-group pb-0">
        <div class="row">
            <div class="col-12 text-center ">
                <h3 class="h3  text-secondary" id="word"
                    style="font-size: 20pt; 
                        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif"></h3>
            </div>
        </div>
    </div>
    
    <div class="form-group">
        <input type="text" class="form-control text-center" 
               style="font-size: 20pt; font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif" name="trans" id="trans" />
    </div>

    <div class="form-group text-center">
        <button type="button" class="btn btn-default btn-lg mx-2" id="btnExample"><span>&#8801</span></button>
        <button type="submit" class="btn btn-info btn-lg mx-2" id="btnCheck">Check</button>
        <button type="button" class="btn btn-default btn-lg mx-2" id="btnTranslate"><span>&#8801</span></button>
    </div>
    <br />
    <div id="toolTip" class="form-group">

    </div>

</div>

<div id="output">

</div>

<script>
    // Set date from Model to localStorage
    localStorage.clear();
    var model = '@Json.Serialize(@Model)';
    localStorage.setItem("model", model);
</script>
    
<script type="module">

    import { Word } from '/script.js';

    var wordBox = document.getElementById("word");
    var transBox = document.getElementById("trans");
    var btnExample = document.getElementById("btnExample");
    var btnCheck = document.getElementById("btnCheck");
    var btnTranslate = document.getElementById("btnTranslate");
    var scores = document.getElementById("scores");
    var toolTip = document.getElementById("toolTip");

    // Adds EventListener for 'Enter' key press
    trans.addEventListener("keyup", function (e) {
        if (e.keyCode == 13) {
            btnCheck.click();
            this.value = "";
        }
    });

    // Gets data from local storage and casts them to Word instances
    var temp = JSON.parse(localStorage.getItem("model"));
    var arr = [];

    for (const i of temp) {
        arr.push(Word.parse(i));
    }

    // Words ammount 
    var ammount = arr.length;

    // Create Set of unique values
    var uniqueSet = new Set();
    var crowlerArray = [];
    while (uniqueSet.size < ammount) {
        var num = Math.floor(Math.random() * ammount);
        uniqueSet.add(num);
    }
    uniqueSet.forEach(p => crowlerArray.push(p));

    scores.attributes["aria-valuemax"].value = 100;

    // actions
    var counter = 0;
    var points = 0;
    
    // Loads new word in trainer
    // Crearing form's input 'transBox'
    function load() {
        counter = crowlerArray.pop();
        if (counter != undefined) {
            var question = arr[counter];
            wordBox.innerText = question.text;
            transBox.value = "";
            toolTip.innerHTML = "";
            transBox.focus();
        }
        else {
            wordBox.innerText = `Work's done! ${points} words are right / ${ammount - points} words are wrong`;
            transBox.value = "";
            toolTip.innerHTML = "";
            transBox.setAttribute("disabled", "true");
        }
    }
    load();

    // Adds EventListener for 'btnCheck' on 'click'
    btnCheck.addEventListener("click", btnCallback);

    // Main 'btn' function
    function btnCallback(e) {
        // Gets value from 'transBox'
        var trans = transBox.value.toLowerCase().trim();
        // if trans is empty - interrupt event executing
        if (trans === "") {
            e.preventDefault();
        }
        else {
            // If translation is right
            if (arr[counter].translation.toLowerCase().split(",").includes(trans) || arr[counter].translation.toLowerCase().split(",").includes(" " + trans)) { 
                // Progress Bar section
                points += 1;
                var tempScores = points * 100 / ammount;
                scores.innerText = tempScores.toFixed(1) + '%';
                scores.style.width = tempScores + '%';
                scores.attributes["aria-valuenow"].value = tempScores;
 
                load();
                transBox.value = "";
            }
            // If translation is not right
            else {
                load();
            }
        }
    }


    // Adds EventListener for 'btnTranslate'
    btnTranslate.addEventListener("click", function (event) {
        toolTip.innerHTML = "<p><span>&#10004;</span>" + arr[counter].translation + "</p>";
    });

    // Adds EventListener for 'btnExample'
    btnExample.addEventListener("click", function (event) {
        toolTip.innerHTML = "";
        arr[counter].examples.split(".").filter(p => p !== " ").forEach(p => toolTip.innerHTML += `<p><span>&#10004;</span> ${p.trim() === "" ? "There are not more examples" : p.trim()}</p>`);
    });
</script>
